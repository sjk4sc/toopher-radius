#!/usr/bin/perl

use Data::Dumper;

my $raddb;
BEGIN {
  if (-e '/etc/freeradius/toopher_radius_config.pm') {
    $raddb = '/etc/freeradius';
    use lib '/etc/freeradius/';
  } elsif (-e '/etc/raddb/toopher_radius_config.pm') {
    $raddb = '/etc/raddb';
    use lib '/etc/raddb/';
  }
}

print "using radius library at $raddb\n";

use Try::Tiny;

# extracts existing Toopher-RADIUS setup into
# common config file format that can be
# applied to a new install

# configuration items
my $toopherConfiguration = {
  TOOPHER_API_URL => 'https://api.toopher.com/v1/',
  TOOPHER_API_KEY => 'YOUR CONSUMER KEY',
  TOOPHER_API_SECRET => 'YOUR CONSUMER SECRET',
  TOOPHER_POLL_TIMEOUT => 20,

  PROMPT_PAIRING_CHALLENGE => 'Toopher 2-factor authentication is enabled for your account.  Please enter the pairing phrase generated by the Toopher mobile app:',
  PROMPT_OTP_CHALLENGE => 'Timeout while contacting the Toopher API.  Please enter the OTP generated by the Toopher Mobile App to proceed.',

  LDAP_IDENTITY => '',
  LDAP_PASSWORD => '',
  LDAP_HOST => '127.0.0.1',
  LDAP_PORT => '389',
  LDAP_BASEDN => '',
  LDAP_SEARCH_FILTER => "(|(uid=%{%{Stripped-User-Name}:-%{User-Name}})(sAMAccountName=%{%{Stripped-User-Name}:-%{User-Name}}))",
  LDAP_GROUP_MEMBERSHIP_FILTER => "(|(&(objectClass=GroupOfNames)(member=%{control:Ldap-UserDn}))(&(objectClass=GroupOfUniqueNames)(uniquemember=%{control:Ldap-UserDn}))(&(objectClass=group)(member=%{control:Ldap-UserDn})))",

  TERMINAL_IDENTIFIER => '[]',

};

sub parse_module_conf
{
  my ($fName) = @_;
  my $lineNumber = 0;
  my $confNode = {};
  my @stack = [];
  open(my $fh, "<", $fName) or die "Unable to open $fName\n";
  while(my $line = <$fh>) {
    $lineNumber++;
    $line =~ s/^\s+|\s+$//g;  # strip whitespace
    #print "$lineNumber : $line\n";
    next unless $line; # skip blank lines
    next if ($line =~ /^#/); # skip comments
    if ($line =~ /^(\w+)\s*=\s*(.*?)$/){
      # normal name=value line
      my $name = $1;
      my $value = $2;
      if ($value =~ /^"(.*)"$/){
        $value = $1;
      }
      $confNode->{$name} = $value;
    } elsif ($line =~ /^(\w+)\s*\{$/) {
      # start new sub-node
      push @stack, $1;
      push @stack, $confNode;
      $confNode = {};
    } elsif ($line =~ /^\}$/) {
      # close sub-node
      my $subNode = $confNode;
      $confNode = pop @stack;
      $confNode->{pop @stack} = $subNode; 
    } else {
      # parser error
      die "Module conf parser error: $fName line $lineNumber\n\t$line\n";
    }
  }
  if ($stack) {
    die "Unclosed sub-node in $fName\n";
  }
  return $confNode;
}

sub update
{
  my ($dest, $destKey, $src, $srcKey) = @_;
  $dest->{$destKey} = $src->{$srcKey} if $src->{$srcKey};
}

# version 0 - pretty much everything is in toopher_radius_config.
# Assume Active Directory
sub fromVersion0
{
  my $config;
  eval {
    use toopher_radius_config;
    $config = toopher_radius_config::get_config;
  };
  $toopherConfiguration->{'TOOPHER_API_URL'} = $config->{'toopher_api'}{'url'};
  $toopherConfiguration->{'TOOPHER_API_KEY'} = $config->{'toopher_api'}{'key'};
  $toopherConfiguration->{'TOOPHER_API_SECRET'} = $config->{'toopher_api'}{'secret'};

  my $ldapUsername = $config->{'ldap'}{'username'};
  my $baseDn = 'cn=users,' . $config->{'ldap'}{'dc'};
  $toopherConfiguration->{'LDAP_IDENTITY'} = 'cn=' . $ldapUsername . ',' . $baseDn;
  $toopherConfiguration->{'LDAP_PASSWORD'} = $config->{'ldap'}{'password'};
  $toopherConfiguration->{'LDAP_HOST'} = $config->{'ldap'}{'host'};
  $toopherConfiguration->{'LDAP_BASEDN'} = $baseDn;

  $toopherConfiguration->{'PROMPT_PAIRING_CHALLENGE'} = $config->{'prompts'}{'pairing_challenge'};
}

sub fromVersion1
{
  my $config;
  eval {
    use toopher_radius_config;
    $config = toopher_radius_config::get_config;
  };
  $toopherConfiguration->{'TOOPHER_API_URL'} = $config->{'toopher_api'}{'url'};
  $toopherConfiguration->{'TOOPHER_API_KEY'} = $config->{'toopher_api'}{'key'};
  $toopherConfiguration->{'TOOPHER_API_SECRET'} = $config->{'toopher_api'}{'secret'};
  $toopherConfiguration->{'TOOPHER_POLL_TIMEOUT'} = $config->{'toopher_api'}{'poll_timeout'};

  $toopherConfiguration->{'PROMPT_PAIRING_CHALLENGE'} = $config->{'prompts'}{'pairing_challenge'};
  $toopherConfiguration->{'PROMPT_OTP_CHALLENGE'} = $config->{'prompts'}{'otp_challenge'};
  $Data::Dumper::Terse = 1;
  my $terminalIdentifier = '' . Dumper($config->{'terminal_identifier'});
  $Data::Dumper::Terse = 0;
  chomp $terminalIdentifier;
  $toopherConfiguration->{'TERMINAL_IDENTIFIER'} = $terminalIdentifier;

  my $ldapConf = parse_module_conf($raddb . '/modules/ldap')->{'ldap'};

  update($toopherConfiguration, 'LDAP_HOST', $ldapConf, 'server');
  update($toopherConfiguration, 'LDAP_PORT', $ldapConf, 'port');
  update($toopherConfiguration, 'LDAP_IDENTITY', $ldapConf, 'identity');
  update($toopherConfiguration, 'LDAP_PASSWORD', $ldapConf, 'password');
  update($toopherConfiguration, 'LDAP_BASEDN', $ldapConf, 'basedn');
  update($toopherConfiguration, 'LDAP_SEARCH_FILTER', $ldapConf, 'filter');
  update($toopherConfiguration, 'LDAP_GROUP_MEMBERSHIP_FILTER', $ldapConf, 'groupmembership_filter');
}

sub getInstalledVersion
{
  my $result = 0;
  eval {
    use toopher_radius_config;
    if (toopher_radius_config::VERSION) {
      $result = toopher_radius_config::VERSION;
    };
  };
  if ($@) {
    die "error: $@\n";
  }
  return '' . $result;
}

my $versionParsers = {
  '0' => \&fromVersion0,
  '1' => \&fromVersion1,
};

my $installedVersion = getInstalledVersion();

print "Installed version is " . $installedVersion . "\n";

print "reading existing configuration...";

$versionParsers->{$installedVersion}();

print " done.\n";
print "configuration is : \n";
foreach my $key (sort keys %{$toopherConfiguration}){
  print "  $key = " . $toopherConfiguration->{$key} . "\n";
}
